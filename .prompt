# Cursor Agent Implementation Prompt

## Project Context
Implement a Real Estate CRM with focus on lead management, team organization, and property listings. Follow modern web development practices using Next.js App Router and TypeScript.

## Implementation Guidelines

### Core Architecture
- Follow directory structure as defined in crm.cursorrules (lines 9-19)
- Implement features one at a time, completing all dependencies
- Use atomic design principles for components
- Use version control system to manage code. Follow principles of atomic commits.
- Reference leads table implementation pattern:

```28:181:src/components/leads/leads-data-table.tsx
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { MoreHorizontal, Pencil, Trash2 } from "lucide-react"
import { useLeadsData } from "@/hooks/use-leads-data"
import { logger } from "@/lib/logger"
import { DataTablePagination } from "@/components/ui/data-table-pagination"
import { AlertDialog, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog"
import { LeadDetailsDrawer } from "./lead-details-drawer"
import { LEAD_STATUS_CONFIG, LeadStatus } from "@/lib/constants"
import * as Icons from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { LoadingSpinner } from "@/components/ui/loading-spinner"
import { LucideIcon } from 'lucide-react'
import { Lead } from "@/hooks/use-leads-data"

interface LeadsDataTableProps {
  data: Lead[]
}
export function LeadsDataTable({ data }: LeadsDataTableProps) {
  const [sorting, setSorting] = useState<SortingState>([])
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})
  const [rowSelection, setRowSelection] = useState({})
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [leadToDelete, setLeadToDelete] = useState<string | null>(null)
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null)

  const columns: ColumnDef<Lead>[] = [
    {
      id: "select",
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          className="border-primary/20 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground"
        />
      ),
      cell: ({ row }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
        />
      ),
      enableSorting: false,
      enableHiding: false,
    },
    {
      accessorKey: "name",
      header: "Name",
      cell: ({ row }) => (
        <Button
          variant="link"
          className="p-0 h-auto font-normal text-primary hover:text-primary/90"
          onClick={() => setSelectedLead(row.original)}
        >
          {row.getValue("name")}
        </Button>
      ),
    },
    {
      accessorKey: "email",
      header: "Email",
    },
    {
      accessorKey: "phone",
      header: "Phone",
    },
    {
      accessorKey: "source",
      header: "Source",
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }) => {
        const status = row.getValue("status") as LeadStatus
        const config = LEAD_STATUS_CONFIG[status]
        const IconComponent = Icons[config.icon as keyof typeof Icons] as LucideIcon
        
        return (
          <div className="flex items-center gap-2">
            <Badge className={`${config.color} ${config.textColor} flex items-center gap-1`}>
              <IconComponent className="h-3 w-3" />
              {status}
            </Badge>
          </div>
        )
      },
    },
    {
      accessorKey: "assignedTo",
      header: "Assigned To",
    },
    {
      accessorKey: "createdAt",
      header: "Created At",
    },
    {
      id: "actions",
      cell: ({ row }) => {
        const lead = row.original

        return (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0 hover:bg-primary/5">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4 text-primary" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => handleEdit(lead.id)}>
                <Pencil className="mr-2 h-4 w-4" />
                Edit
              </DropdownMenuItem>
              <DropdownMenuItem 
                className="text-red-600"
                onClick={() => handleDeleteClick(lead.id)}
              >
                <Trash2 className="mr-2 h-4 w-4" />
                Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        )
      },
    },
  ]

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  })
```


### Design System Requirements
- Use shadcn/ui components
- Implement Work Sans font family
- Follow color system:
  - Primary: indigo-500 (HSL)
  - Secondary: blue-500 (HSL)
  - Support light/dark themes
- Use Lucide icons exclusively

### Development Standards
1. **Component Development**
   - Use `onPress` instead of `onClick`
   - Implement loading states with skeletons
   - Follow table requirements from .cursorrules (lines 45-56)
   - Ensure mobile responsiveness

2. **State Management**
   - Use React Query for server state
   - Implement context for global state
   - Follow hooks pattern from leads implementation

3. **Data Handling**
   - Store dummy data in constants/dummyData/*
   - Implement proper error boundaries
   - Use logger for all events/actions

### Version Control
- Follow branch strategy from crm.cursorrules (lines 274-286)
- Use atomic commits with conventional commit messages
- Create feature branches: `feature/[ticket-number]-brief-description`

### Quality Requirements
- TypeScript strict mode enabled
- ESLint rules followed
- Accessibility compliance
- Mobile-first responsive design

## Implementation Order
1. Setup project structure and dependencies
2. Implement authentication system
3. Build lead management feature
4. Develop team management
5. Create property management
6. Add import functionality
7. Implement reporting system

## Dependencies to Verify
- Next.js 13+
- shadcn/ui
- TanStack Query
- Lucide React
- Work Sans font
- Required shadcn/ui components

## Additional Notes
- Reference existing implementation patterns in the codebase
- Follow UX guidelines for destructive actions
- Ensure all tables follow the defined pattern
- Implement proper loading states
- Use Next.js Image and Link components
- Maintain consistent code organization and import order

Would you like me to elaborate on any specific aspect of the implementation prompt?
