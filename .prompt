Here's the prompt for the Cursor agent to implement the team page improvements:

```markdown
# Task: Implement Team Management Page Improvements

## Overview
Enhance the team management page with proper TypeScript types, error handling, loading states, and UI improvements.

## Implementation Steps

1. First, add required shadcn/ui components:
```bash
npx shadcn@latest add alert-dialog
npx shadcn@latest add skeleton
npx shadcn@latest add dropdown-menu
```

2. Create the following type definitions in `src/lib/types/team.ts`:
```typescript
export interface TeamMember {
  id: string
  name: string
  email: string
  role: 'admin' | 'manager' | 'agent'
  status: 'active' | 'inactive'
  joinedAt: string
  permissions: TeamPermissions
  avatar?: string
}

export interface TeamMemberFormData {
  name: string
  email: string
  role: TeamMember['role']
  status: TeamMember['status']
  permissions: TeamPermissions
}

export interface TeamPermissions {
  manageTeam: boolean
  manageLeads: boolean
  manageProperties: boolean
  viewReports: boolean
  settings: boolean
}

export interface BulkActionPayload {
  ids: string[]
  data: Partial<TeamMember>
}
```

3. Create the following components:

a. `src/components/team/delete-confirmation-dialog.tsx`:
```typescript
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog"
import { logger } from "@/lib/logger"

interface DeleteConfirmationDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  onConfirm: () => Promise<void>
  isDeleting: boolean
  count: number
}

export function DeleteConfirmationDialog({
  open,
  onOpenChange,
  onConfirm,
  isDeleting,
  count
}: DeleteConfirmationDialogProps) {
  const handleConfirm = async () => {
    logger.info("Confirming team member deletion", { count })
    await onConfirm()
  }

  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
          <AlertDialogDescription>
            This action cannot be undone. This will permanently delete {count === 1 ? 'this team member' : `${count} team members`} and remove their data from the server.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction 
            onClick={handleConfirm}
            disabled={isDeleting}
            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
          >
            {isDeleting ? "Deleting..." : "Delete"}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}
```

b. `src/components/team/bulk-actions-dropdown.tsx`:
```typescript
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { MoreHorizontal, Trash, UserCheck, UserX, KeyRound } from "lucide-react"
import { logger } from "@/lib/logger"

interface BulkActionsDropdownProps {
  selectedCount: number
  onAction: (action: string) => void
  disabled?: boolean
}

export function BulkActionsDropdown({
  selectedCount,
  onAction,
  disabled
}: BulkActionsDropdownProps) {
  if (selectedCount === 0) return null

  const handleAction = (action: string) => {
    logger.info("Bulk action selected", { action, selectedCount })
    onAction(action)
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" disabled={disabled}>
          <MoreHorizontal className="h-4 w-4 mr-2" />
          Bulk Actions ({selectedCount})
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onSelect={() => handleAction("activate")}>
          <UserCheck className="h-4 w-4 mr-2" />
          Activate
        </DropdownMenuItem>
        <DropdownMenuItem onSelect={() => handleAction("deactivate")}>
          <UserX className="h-4 w-4 mr-2" />
          Deactivate
        </DropdownMenuItem>
        <DropdownMenuItem onSelect={() => handleAction("reset-password")}>
          <KeyRound className="h-4 w-4 mr-2" />
          Reset Password
        </DropdownMenuItem>
        <DropdownMenuItem 
          onSelect={() => handleAction("delete")}
          className="text-destructive focus:text-destructive"
        >
          <Trash className="h-4 w-4 mr-2" />
          Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

4. Update the team page component at:
```typescript:src/app/(dashboard)/team/page.tsx
startLine: 1
endLine: 256
```

5. Update the team data hook to include bulk actions:
```typescript
export function useTeamData() {
  const queryClient = useQueryClient()
  
  const { data: team, isLoading } = useQuery({
    queryKey: ['team'],
    queryFn: fetchTeamMembers
  })

  const { mutate: addTeamMember, isPending: isAddingTeamMember } = useMutation({
    mutationFn: createTeamMember,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['team'] })
    }
  })

  const { mutate: updateTeamMember, isPending: isUpdatingTeamMember } = useMutation({
    mutationFn: updateTeamMemberData,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['team'] })
    }
  })

  const { mutate: deleteTeamMember, isPending: isDeletingTeamMember } = useMutation({
    mutationFn: deleteTeamMemberData,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['team'] })
    }
  })

  const { mutate: bulkDeleteTeamMembers, isPending: isBulkDeletingTeamMembers } = useMutation({
    mutationFn: bulkDeleteTeamMembersData,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['team'] })
    }
  })

  const { mutate: bulkUpdateTeamMembers, isPending: isBulkUpdatingTeamMembers } = useMutation({
    mutationFn: bulkUpdateTeamMembersData,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['team'] })
    }
  })

  return {
    team,
    isLoading,
    addTeamMember,
    updateTeamMember,
    deleteTeamMember,
    bulkDeleteTeamMembers,
    bulkUpdateTeamMembers,
    isAddingTeamMember,
    isUpdatingTeamMember,
    isDeletingTeamMember,
    isBulkDeletingTeamMembers,
    isBulkUpdatingTeamMembers
  }
}
```

## Requirements

1. Follow TypeScript strict mode
2. Use proper error boundaries
3. Implement loading states for all operations
4. Add confirmation for destructive actions
5. Support bulk operations
6. Log all important actions
7. Follow the design system guidelines
8. Use proper component composition
9. Implement responsive design
10. Follow accessibility guidelines

## Reference Components
```typescript:src/components/team/team-page-header.tsx
startLine: 1
endLine: 33
```

## Project Guidelines
- Use onPress instead of onClick for custom components
- Use shadcn/ui components
- Follow the color system (indigo-500 primary, blue-500 secondary)
- Implement proper error handling
- Add logging for all actions
```

Would you like me to elaborate on any part of this implementation plan?
